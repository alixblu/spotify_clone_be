"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

import sys
sys.path.append('/home/alixblu/project/Spotify/backend')
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-zbb^@6$^lq^or+@*gj0&xr-w*1(yqzwuzhis3&gc8)-3824@2@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost']



# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'djongo',
    'spotify_app',
    'user_management',
    'spotify_api',
    'music_library',
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:5173",
]
# CORS_ALLOW_ALL_ORIGINS = True
ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'NAME': 'spotify_database',  # Replace with your MongoDB database name
        'HOST': 'localhost',         # MongoDB server address
        'PORT': 27017,               # Default MongoDB port
        'ENFORCE_SCHEMA': False,       # Set to False if you don't want to enforce schema
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

SECURE_SSL_REDIRECT = False
# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

import os
from dotenv import load_dotenv

load_dotenv()

SECRET_KEY = os.getenv("SECRET_KEY")
DEBUG = os.getenv("DEBUG") == "True"
DATABASE_URL = os.getenv("DATABASE_URL")
SPOTIFY_CLIENT_ID = os.getenv("SPOTIFY_CLIENT_ID")
SPOTIFY_CLIENT_SECRET = os.getenv("SPOTIFY_CLIENT_SECRET")
SPOTIFY_REDIRECT_URI = os.getenv("REDIRECT_URI")
SCOPE = "user-read-private user-read-email"

# def get_token():
#     auth_string = SPOTIFY_CLIENT_ID + ":" + SPOTIFY_CLIENT_SECRET
#     auth_bytes = auth_string.encode('utf-8')
#     auth_base64 = base64.b64encode(auth_bytes).decode('utf-8')
#     url = 'https://accounts.spotify.com/api/token'  # Corrected to HTTPS
#     headers = {
#         'Authorization': 'Basic ' + auth_base64,
#         'Content-Type': 'application/x-www-form-urlencoded'
#     }
#     data = {
#         'grant_type': 'client_credentials'
#     }
#     response = requests.post(url, headers=headers, data=data)

#     print(f"Status Code: {response.status_code}")
#     print(f"Response Text: {response.text}")

#     try:
#         json_result = response.json()
#     except ValueError:
#         raise Exception(f"Failed to parse JSON. Response text: {response.text}")

#     if 'access_token' not in json_result:
#         raise Exception(f"Access token not found in response. Response: {json_result}")

#     access_token = json_result['access_token']
#     return access_token
# print(f"Access Token: {get_token()}")
# def get_auth_header(access_token):
#     return {"Authorization": "Bearer " + access_token}

# def search_for_artist(artist_name):
#     access_token = get_token()
#     headers = get_auth_header(access_token)
#     url = 'https://api.spotify.com/v1/search'
#     params = {
#         'q': artist_name,
#         'type': 'artist',
#         'limit': 1
#     }
#     response = requests.get(url, headers=headers, params=params)

#     print(f"Status Code: {response.status_code}")
#     print(f"Response Text: {response.text}")

#     try:
#         json_result = response.json()
#     except ValueError:
#         raise Exception(f"Failed to parse JSON. Response text: {response.text}")

#     if 'artists' in json_result and json_result['artists']['items']:
#         print("Artist found")
#         artist = json_result['artists']['items'][0]
#         print(artist['name'])
#         return artist
#     else:
#         print("No artist found")
#         return None
# search_for_artist("Taylor Swift")

# def get_songs_by_artist(artist_id):
#     access_token = get_token()
#     headers = get_auth_header(access_token)
#     url = f'https://api.spotify.com/v1/artists/{artist_id}/top-tracks'
#     params = {
#         'market': 'US'
#     }
#     response = requests.get(url, headers=headers, params=params)
#     json_result = response.json()
#     if json_result['tracks']:
#         tracks = json_result['tracks']
#         for track in tracks:
#             print(track['name'])
#         return json_result['tracks']
#     else:
#         print("No songs found")
#         return None

